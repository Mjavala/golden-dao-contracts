{
  "version": "3.2",
  "log": [
    {
      "UniswapV2RouterMock": {
        "src": "contracts/treasuryMockExchange.sol:3",
        "version": {
          "withMetadata": "dac49cec551e3bba3d8c082de8245dec77ccf2ccbd94d6bcc304f111336ad515",
          "withoutMetadata": "bafbd8e4406c379ee377d514029cd7b23f218dc9fdb4de70e3825a7e8e64818e",
          "linkedWithoutMetadata": "bafbd8e4406c379ee377d514029cd7b23f218dc9fdb4de70e3825a7e8e64818e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getAmountsOut(uint256,address[])",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2RouterMock",
            "src": "contracts/treasuryMockExchange.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2RouterMock",
              "label": "amount",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/treasuryMockExchange.sol:4"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:28",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1632_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1632_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1632_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)3045_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)3045_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)3045_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:17",
        "version": {
          "withMetadata": "a9e2b2097ab6dacd8af007b8df3e5931eb9f08bc2bd4b828278ca95b3ba6402b",
          "withoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb",
          "linkedWithoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesCompUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "setTreasuryAddress(address)",
          "setWhitelistAddress(address,bool)",
          "setTax(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/Gold1.sol:19"
            },
            {
              "contract": "Gold1",
              "label": "tax",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:20"
            },
            {
              "contract": "Gold1",
              "label": "whitelistedAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts/Gold1.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:206",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "a9d2d31d3e4929a2aa5774457c4aba3ffa8a885b5227c1bdc966fd0c0eb48579",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5383",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5404",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5291_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5383": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5404": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5291_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)5291_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)5298_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)5298_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)5298_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "52863c5e2874a473906f92b278a863e5596eb53978df9ca0d8f3ab7c01399086",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "32bfb87ffd647ff97330b5a5a0b43b3710dc8a752989f561303c55da5ff587cf",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "6d0defe215d4bd1644f4d1aeb5526d5a840af967148ea571fd31464cfb55ff7c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)",
          "checkHighestStaker(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:14",
        "version": {
          "withMetadata": "056e70ef666792956e9eb68281056ee76567e2b1a8c333d185e437742ddb568d",
          "withoutMetadata": "fa3eef4afed926a541b8c094dc130829267513e0fa25ce82262cb7db4abc8f1b",
          "linkedWithoutMetadata": "fa3eef4afed926a541b8c094dc130829267513e0fa25ce82262cb7db4abc8f1b"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "checkHighestStaker(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:17"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5451_storage)dyn_storage)",
              "src": "contracts/Maia.sol:24"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:56"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:58"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5480_storage)dyn_storage",
              "src": "contracts/Maia.sol:67"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5464_storage))",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:71"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:77"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)1540": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5451_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5451_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5451_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5480_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5480_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)1540"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5464_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5464_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5464_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:9",
        "version": {
          "withMetadata": "a0fbf020b519ab467999900cd7245aebf4c2ce9a49cefdfb30592aad6dafb40d",
          "withoutMetadata": "a2c31af806a7f0177fc17845e8b096f9b9d9cf86e27279b424de2db71352e9fe",
          "linkedWithoutMetadata": "a2c31af806a7f0177fc17845e8b096f9b9d9cf86e27279b424de2db71352e9fe"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:11"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:14"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:17"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:20"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}