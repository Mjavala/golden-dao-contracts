{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "0822aae5793ead695f3972aeeb60d4fb0cb0f7df4505c132b72ba730e45c355e",
          "withoutMetadata": "12571ded57079d2f1674e8230ec176d7ddfcd0427f53788d1871ddb040227fe9",
          "linkedWithoutMetadata": "12571ded57079d2f1674e8230ec176d7ddfcd0427f53788d1871ddb040227fe9"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "bada734a38f373ffe9e68da5b4aba3a7c9959ca78c887582282be7fcf888548c",
          "withoutMetadata": "eb0e344207f1145f19c8ec7ff4f9cbb38af8d89b3df719eaebf1ff6cf8c2f73e",
          "linkedWithoutMetadata": "eb0e344207f1145f19c8ec7ff4f9cbb38af8d89b3df719eaebf1ff6cf8c2f73e"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "03bf673cfa131b35b0d496b5919ad13ed7d6856fd9cf6060630978b0b52df2f4",
          "withoutMetadata": "b356852c48d0fe39e75cf405ef22658d7bebdf9f861f58e2791f307e1d4018c8",
          "linkedWithoutMetadata": "b356852c48d0fe39e75cf405ef22658d7bebdf9f861f58e2791f307e1d4018c8"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "21b0b4ad1be696ee771a9562b157d70fcac0a1d30366bcce617b6a51190aa925",
          "withoutMetadata": "03b2cceac5878af739143aa504687c52a66ed331cfd737568d859ccbf5af468f",
          "linkedWithoutMetadata": "03b2cceac5878af739143aa504687c52a66ed331cfd737568d859ccbf5af468f"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "d7661dc7c782af32e18ba6b08df4b804c2413fbd2c2297c58a5a1283b604373c",
          "withoutMetadata": "08c9fa307983a19f8c6b6efee61412bbb87d276599d9477100be7b9f6baf7134",
          "linkedWithoutMetadata": "08c9fa307983a19f8c6b6efee61412bbb87d276599d9477100be7b9f6baf7134"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "eafd0be3968a7bf46df4530990ddc35cbd388ccc74b75e11a7301c3aea87e941",
          "withoutMetadata": "dd618597027adf6d6ded4babcd5f0a9e61cdb9a41d3fa51f565242607e712043",
          "linkedWithoutMetadata": "dd618597027adf6d6ded4babcd5f0a9e61cdb9a41d3fa51f565242607e712043"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "42bbe01a9b423475edd33febb6a3bf6ca6ad8ea8aef215b910ebb230b70702e3",
          "withoutMetadata": "612d4f0a771dead7b3d4bae6cedcf261b3eac90e86983a84891f57bc24c4f97b",
          "linkedWithoutMetadata": "612d4f0a771dead7b3d4bae6cedcf261b3eac90e86983a84891f57bc24c4f97b"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "0feb5689e71038d981839e28b1e70b0aae0c1396b7577d1a3b2c233d70247c67",
          "withoutMetadata": "08faf154b431b1ae5ee738af16a26658713b056330e054f36acdd5e1bf388ada",
          "linkedWithoutMetadata": "08faf154b431b1ae5ee738af16a26658713b056330e054f36acdd5e1bf388ada"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "42bbe01a9b423475edd33febb6a3bf6ca6ad8ea8aef215b910ebb230b70702e3",
          "withoutMetadata": "612d4f0a771dead7b3d4bae6cedcf261b3eac90e86983a84891f57bc24c4f97b",
          "linkedWithoutMetadata": "612d4f0a771dead7b3d4bae6cedcf261b3eac90e86983a84891f57bc24c4f97b"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "7df5520cfc5f245f790316851e6d224c51d04a0c11199118d39de26a90c8639e",
          "withoutMetadata": "0470d9d4c43afc2fcd9e3a7cbf2f8ad26ee7eac40e2ac38a4a5bb496a0fcb90d",
          "linkedWithoutMetadata": "0470d9d4c43afc2fcd9e3a7cbf2f8ad26ee7eac40e2ac38a4a5bb496a0fcb90d"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "c1c1cc4632988c22a2a8e15c7c75f7e6164a81482ea8fb1418da7b367433367d",
          "withoutMetadata": "6e52e9be2f7d9ec966699d5fdd3a1e39ee078caebe2dbf87be28e0ddc4244d88",
          "linkedWithoutMetadata": "6e52e9be2f7d9ec966699d5fdd3a1e39ee078caebe2dbf87be28e0ddc4244d88"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "valarRewards(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "a3c85dc05973710aa7eb1f2691db6e3d2864e1924edd8d6d29b88bbf718e26f0",
          "withoutMetadata": "37574b99c7f99c4ff5aa55acfcab6e9b6447b83483aef038d05a3f34ce17183f",
          "linkedWithoutMetadata": "37574b99c7f99c4ff5aa55acfcab6e9b6447b83483aef038d05a3f34ce17183f"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "Valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:81"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:83"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:85"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:87"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "f34dd99ef54c94192a86999385b04e4497e0ac5b793f7a4a6e4d742d70521085",
          "withoutMetadata": "aaeccd9d0db1af9703deceec159633de5f3121e8baeda4fc5af920db615c2a45",
          "linkedWithoutMetadata": "aaeccd9d0db1af9703deceec159633de5f3121e8baeda4fc5af920db615c2a45"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:63"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:72"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:80"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:82"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:84"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "3a4cf3537eca074835f2d0ec630474829cc05d35aefc8ef977bc42b6c2d53bd5",
          "withoutMetadata": "786d9044cea5d32e1738d1064cf60f01de44c3ac6f300acff737f7e2cbd4daf7",
          "linkedWithoutMetadata": "786d9044cea5d32e1738d1064cf60f01de44c3ac6f300acff737f7e2cbd4daf7"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:63"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:72"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:80"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:82"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:84"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "d6dba398f7a11de02cf84c45fef36205bb8f8256b9d6ca0530bef6dd0fb7321b",
          "withoutMetadata": "1af97920a559718763ab1822078678540d4e5f94d1d967fa06567a32bdd40a7f",
          "linkedWithoutMetadata": "1af97920a559718763ab1822078678540d4e5f94d1d967fa06567a32bdd40a7f"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:63"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:72"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:80"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:82"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:84"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "6521ec5529b2fb4c1900935948e0a62bc70fcde11d6f8436df83681711f93e9d",
          "withoutMetadata": "24d0516c5a822a4f63c53e4bdd8db288b1f8cf9c78cf6927eaa4981ed2ee1044",
          "linkedWithoutMetadata": "24d0516c5a822a4f63c53e4bdd8db288b1f8cf9c78cf6927eaa4981ed2ee1044"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "getVPOOL(uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:63"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:72"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:80"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:82"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:84"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "4a71869d7c2a537564ce84c91b1d3d1a3483725a01a0e24142117bda06261e05",
          "withoutMetadata": "1edd2f1b482dca18f7165fd368dde57eb61bf952becdfb5735755d4954a797fb",
          "linkedWithoutMetadata": "1edd2f1b482dca18f7165fd368dde57eb61bf952becdfb5735755d4954a797fb"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:61"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:63"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5106_storage)dyn_storage",
              "src": "contracts/Maia.sol:72"
            },
            {
              "contract": "Maia",
              "label": "valarPoolInfo",
              "type": "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "valarUserInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:80"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:82"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:84"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5106_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5106_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_struct(ValarPoolInfo)5113_storage)dyn_storage": {
              "label": "struct Maia.ValarPoolInfo[]"
            },
            "t_struct(ValarPoolInfo)5113_storage": {
              "label": "struct Maia.ValarPoolInfo",
              "members": [
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "totalValar",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ValarUserInfo)5090_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.ValarUserInfo))"
            },
            "t_mapping(t_address,t_struct(ValarUserInfo)5090_storage)": {
              "label": "mapping(address => struct Maia.ValarUserInfo)"
            },
            "t_struct(ValarUserInfo)5090_storage": {
              "label": "struct Maia.ValarUserInfo",
              "members": [
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "018795af12b45bd78552f9eda2e9ff35e2ccc71001ec9e39d35de0d0f0ca142f",
          "withoutMetadata": "2d59b266603651582d49a187131928c20f5b067baba29ac6030a88ac3158e28e",
          "linkedWithoutMetadata": "2d59b266603651582d49a187131928c20f5b067baba29ac6030a88ac3158e28e"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "e3d60f1bb3a86ba735bf4a5a6260bb606a44767b90aeff541b5489554eeee0df",
          "withoutMetadata": "8479b56b7a34c1da81481a5674acd202f851a39f016af6968e67fddcdc891659",
          "linkedWithoutMetadata": "8479b56b7a34c1da81481a5674acd202f851a39f016af6968e67fddcdc891659"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "f46f28c4658d85dd942a793bdb89f870a6b84f56476646f831f364d154b5a6f8",
          "withoutMetadata": "804adc8f1963da3e235bb838047137d37abb728cba7b424a6e5d580a2d0404c2",
          "linkedWithoutMetadata": "804adc8f1963da3e235bb838047137d37abb728cba7b424a6e5d580a2d0404c2"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "getTS(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "5f17f24775a3305f11d6a99cc39d9bfe311aa13a24c61db0388f04c1c32cacdf",
          "withoutMetadata": "7480147d3e8b503ac96ee571ef9e07ee0804637894f5e35d69a38aadd53da5ed",
          "linkedWithoutMetadata": "7480147d3e8b503ac96ee571ef9e07ee0804637894f5e35d69a38aadd53da5ed"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "getTS(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "2f6c158201ebcd6f33fee7bfd741b95e76eef509681e1ab4877b3c453ff84c73",
          "withoutMetadata": "9ba22712c8b810143442a6f97cb4db5249b69fcb067c3e2662498e43332d8a8e",
          "linkedWithoutMetadata": "9ba22712c8b810143442a6f97cb4db5249b69fcb067c3e2662498e43332d8a8e"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "getTS(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "381af831fbeed0adddd3dddfca9d7d9508451c5162c7887c787ee64c4eed89de",
          "withoutMetadata": "52c76f2c1c41b5abcc6b86519c1f242d06376e7efe2ad045e9169eddae663993",
          "linkedWithoutMetadata": "52c76f2c1c41b5abcc6b86519c1f242d06376e7efe2ad045e9169eddae663993"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePoolHelper(uint256)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "3529bf60896bb3bccf0690ecf865fcbcffbef99dc03c0045e8031fa74691f442",
          "withoutMetadata": "2eea928f3bd7f9754ca8d040e5534e60cd9f33acbb5ce47253ff26274e455357",
          "linkedWithoutMetadata": "2eea928f3bd7f9754ca8d040e5534e60cd9f33acbb5ce47253ff26274e455357"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "d0d801297be0a9c924e95b1d850764248a238708f630815d701781a77dd098e9",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "d52da8ade1ef60eb23b1f1f7d23943b4682023f49170e2a1d54c28834d2031d6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "303c996e358dae5d5bca547166e59736f9d4d51a20f8a53628f56acc7554ece7",
          "withoutMetadata": "bebdff3f910669efae921f27606982f87ebe8b5d5acbb2b1b76490a5a4ba4eb0",
          "linkedWithoutMetadata": "bebdff3f910669efae921f27606982f87ebe8b5d5acbb2b1b76490a5a4ba4eb0"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "3b75b46d378b0d6f5843830a235613b0d7e84c6226ad139e3e5cb4f3331fee6b",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "37950fd01a072e11dfb525afb295f79c2eff218ddb1a5169ae356faaba869a50",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "87b54b9a220ec3040068ed0600c5807baf658645d67a6b39d19b0f0b029853e1",
          "withoutMetadata": "42c82857c72f45c49f65832b1abc42c750e9ee674b9171e334c92d20a9128386",
          "linkedWithoutMetadata": "42c82857c72f45c49f65832b1abc42c750e9ee674b9171e334c92d20a9128386"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "083a4db844a4512280b02f528c36431976054e0ead5eff8d0fb669ce5cfb2e53",
          "withoutMetadata": "5bc586479adeaee44959662e9bf03b58edcafd76c5c6e43bf9ee5a4b29fc3a6a",
          "linkedWithoutMetadata": "5bc586479adeaee44959662e9bf03b58edcafd76c5c6e43bf9ee5a4b29fc3a6a"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "3529bf60896bb3bccf0690ecf865fcbcffbef99dc03c0045e8031fa74691f442",
          "withoutMetadata": "2eea928f3bd7f9754ca8d040e5534e60cd9f33acbb5ce47253ff26274e455357",
          "linkedWithoutMetadata": "2eea928f3bd7f9754ca8d040e5534e60cd9f33acbb5ce47253ff26274e455357"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "d0d801297be0a9c924e95b1d850764248a238708f630815d701781a77dd098e9",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "d52da8ade1ef60eb23b1f1f7d23943b4682023f49170e2a1d54c28834d2031d6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "1d3f020a76adbb42c722a6cf063f291dfb41f45b858345522287444530869874",
          "withoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703",
          "linkedWithoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "2677521ca39f239ad3c90929bc3ed06980fffdc593c95fdf2aeeec810e222e12",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "cf7f551d17299e5f311710110f3848e1f8bb82d4434ffc99e1bcdd17bbd2d415",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "614150efe2dab46491ce1b6539a3c1702541169d563592a41b03ac696e87cd94",
          "withoutMetadata": "d1d8e519bec27b178fd5e56af9360a50f0cb7a49ef95931b9138e0d7632ea403",
          "linkedWithoutMetadata": "d1d8e519bec27b178fd5e56af9360a50f0cb7a49ef95931b9138e0d7632ea403"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "99f4fef2d568ccb84f2aeb73b13aab3d763d2eff8b7216e134d475d4576a38c8",
          "withoutMetadata": "5121c7b42643021656c73c161a23dca560f43097e6f37a3adfd54c481974fb2b",
          "linkedWithoutMetadata": "5121c7b42643021656c73c161a23dca560f43097e6f37a3adfd54c481974fb2b"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "3b28093eefe0a3ef2bc25a95041c6e39650e005e7f42ee522dc01e7699806b98",
          "withoutMetadata": "b25d6f8fb7bf8ac63c54e62db3b39924ba92c5d089f4842bf67b4753f0a1c9a3",
          "linkedWithoutMetadata": "b25d6f8fb7bf8ac63c54e62db3b39924ba92c5d089f4842bf67b4753f0a1c9a3"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "56ac9ecebdbfe5e94b435027059645df80f95a31e6cacfd70eea99a646d50f25",
          "withoutMetadata": "e416d661eeb432c474bafd3fba481722526cbe9b176e124a81dbb3f05329e5c4",
          "linkedWithoutMetadata": "e416d661eeb432c474bafd3fba481722526cbe9b176e124a81dbb3f05329e5c4"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "1c890d43c8e7973043bc8b778bc7b58f199eda0059dfe433883e953417945557",
          "withoutMetadata": "0143153d45402c6982f0c6e560bcecd5d73cd763479908957c5e781f36ac8adb",
          "linkedWithoutMetadata": "0143153d45402c6982f0c6e560bcecd5d73cd763479908957c5e781f36ac8adb"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "a39fb28abdaf8483ad4d42b4ac93bbec745b4409c5a8ea6ba324b98782b81348",
          "withoutMetadata": "3d3151fb016098e08e6bdbf3f545eadd5c7409463b2efbe0dfaa4b55903a0247",
          "linkedWithoutMetadata": "3d3151fb016098e08e6bdbf3f545eadd5c7409463b2efbe0dfaa4b55903a0247"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "af88f84a4d5f41e9b549c692e61116fd225dbb4e194e7f7e7aaf3671eeba373e",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "b5f5c3b476f7a75b39e906bd9943b0dae7fb50079ff0e9bab3c9373b3ce1d34a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "dc4756bf80a278f501b2a96ffe132ee92bd13b91f7e5b46303a620ece926ec75",
          "withoutMetadata": "4a0f587f01eb9a66c621ae89317eb718b696267b2825fdf02df666ec210b8330",
          "linkedWithoutMetadata": "4a0f587f01eb9a66c621ae89317eb718b696267b2825fdf02df666ec210b8330"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "d01be3a236ad6435c8d34bb3529304da26abbf832bd86fe2afa57f2f78d6e305",
          "withoutMetadata": "7bb7c4b4fa17d2634b0339c5d04ddadcf90b27703bbdb07f352b0ab7d65cbf0a",
          "linkedWithoutMetadata": "7bb7c4b4fa17d2634b0339c5d04ddadcf90b27703bbdb07f352b0ab7d65cbf0a"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "5f3da98f6a4ffbc5f4b93360c16c737247d049a7b060571a0f905b712406878b",
          "withoutMetadata": "fab5835db4a365ff4dc1acebdd84720a0d5591162a19dafc423e622bc0326aff",
          "linkedWithoutMetadata": "fab5835db4a365ff4dc1acebdd84720a0d5591162a19dafc423e622bc0326aff"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "dc4756bf80a278f501b2a96ffe132ee92bd13b91f7e5b46303a620ece926ec75",
          "withoutMetadata": "4a0f587f01eb9a66c621ae89317eb718b696267b2825fdf02df666ec210b8330",
          "linkedWithoutMetadata": "4a0f587f01eb9a66c621ae89317eb718b696267b2825fdf02df666ec210b8330"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "56ac9ecebdbfe5e94b435027059645df80f95a31e6cacfd70eea99a646d50f25",
          "withoutMetadata": "e416d661eeb432c474bafd3fba481722526cbe9b176e124a81dbb3f05329e5c4",
          "linkedWithoutMetadata": "e416d661eeb432c474bafd3fba481722526cbe9b176e124a81dbb3f05329e5c4"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdrawHelper(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "221d0960fe32742a2bada55627fb2f922457c0043de186005ac693f6ad4ed044",
          "withoutMetadata": "e12e736b11bfc9cdc191757c46de655f5abc4bd14b92226f4f66436a1dad28ee",
          "linkedWithoutMetadata": "e12e736b11bfc9cdc191757c46de655f5abc4bd14b92226f4f66436a1dad28ee"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "b372f1a9bcfef585ed749dc71df56be7da53341d88b535287ee03cc7dd9e4fd4",
          "withoutMetadata": "50b822c2ea27423df50c79b5440d9498f697198c88149a252fbca0e9d21655d9",
          "linkedWithoutMetadata": "50b822c2ea27423df50c79b5440d9498f697198c88149a252fbca0e9d21655d9"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "e1f55e13e9a46cc26795463a5bd418292fda055d644e6573d8c831c2968ba86d",
          "withoutMetadata": "56c81eaaa56c0f896ab8108fb8261e06528aca1e2d0137ca12d2f6601e83ec26",
          "linkedWithoutMetadata": "56c81eaaa56c0f896ab8108fb8261e06528aca1e2d0137ca12d2f6601e83ec26"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "12107b932b747b97998800a0b5cd7b590a70b697d5cc10dc1b9676bf92db9c73",
          "withoutMetadata": "e12e736b11bfc9cdc191757c46de655f5abc4bd14b92226f4f66436a1dad28ee",
          "linkedWithoutMetadata": "e12e736b11bfc9cdc191757c46de655f5abc4bd14b92226f4f66436a1dad28ee"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "getUser(uint256,address)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:51"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:53"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5103_storage)dyn_storage",
              "src": "contracts/Maia.sol:62"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(PoolInfo)5103_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5103_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5087_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5087_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5087_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "f948da8ba7fed9a711b4b233aef2bb9b8d11d0c1afa3580df8337f46b9906a93",
          "withoutMetadata": "123f17e471d86e48bc70a315a5cf5e6afb53327aad24f78cf7dd22603af543e6",
          "linkedWithoutMetadata": "123f17e471d86e48bc70a315a5cf5e6afb53327aad24f78cf7dd22603af543e6"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "getPool(uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage)",
              "src": "contracts/Maia.sol:25"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:58"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:60"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5114_storage)dyn_storage",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5098_storage))",
              "src": "contracts/Maia.sol:71"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:79"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5083_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5114_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5114_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5098_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5098_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5098_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "1d3f020a76adbb42c722a6cf063f291dfb41f45b858345522287444530869874",
          "withoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703",
          "linkedWithoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "2677521ca39f239ad3c90929bc3ed06980fffdc593c95fdf2aeeec810e222e12",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "cf7f551d17299e5f311710110f3848e1f8bb82d4434ffc99e1bcdd17bbd2d415",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "778e77f99df2529e5d953ada99c13f81fe92fafb736ef8a351a8da439abd005b",
          "withoutMetadata": "84d1b8f917a32427be33492faf551ba623b84f6f34a67a6ca29255a033aed594",
          "linkedWithoutMetadata": "84d1b8f917a32427be33492faf551ba623b84f6f34a67a6ca29255a033aed594"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage)",
              "src": "contracts/Maia.sol:25"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:58"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:60"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5114_storage)dyn_storage",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5098_storage))",
              "src": "contracts/Maia.sol:71"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:79"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5083_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5114_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5114_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5098_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5098_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5098_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "8b13ae0d9239e06937599eae70a17e470ffdb9e3cc3fed6f0828920c3beb3088",
          "withoutMetadata": "9cf5513f5dad1de974dfdc5232f990fae9740162152c9ac68b75e3b97aa30d97",
          "linkedWithoutMetadata": "9cf5513f5dad1de974dfdc5232f990fae9740162152c9ac68b75e3b97aa30d97"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "1d5ec9b2a0bad7f95cb814470b142239af7a3951b41e99e0dfcc0b9e14ee3145",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "b55aa6c3a7b20a9dec0be1cd399bf579a9421bd4a857ddc3177cee03b8642c8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "1d3f020a76adbb42c722a6cf063f291dfb41f45b858345522287444530869874",
          "withoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703",
          "linkedWithoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "2677521ca39f239ad3c90929bc3ed06980fffdc593c95fdf2aeeec810e222e12",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "cf7f551d17299e5f311710110f3848e1f8bb82d4434ffc99e1bcdd17bbd2d415",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "f4be3ae4155ceba3f6f015511492f7eab7776323b584a0ebf1b0f7132fef4976",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "c9e14b402f10e14e69dbfc1bb3e7846a5fb55a9c637f044dacb43225725c74f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TehGoldenOne": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "8f5b54d01d5f36d93a9e09ac50bcbba6cd9ef197a57900796e6e8930f7129ec0",
          "withoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703",
          "linkedWithoutMetadata": "8735c27a0fc17a2253b540f54a3a53a7ed9684b827d177ebacf9a0ab8e2f1703"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TehGoldenOne",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TehGoldenOne",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "TehGoldenOne",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "TehGoldenOne",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "TehGoldenOne",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "TehGoldenOne",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "TehGoldenOne",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "TehGoldenOne",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "TehGoldenOne",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "TehGoldenOne",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "TehGoldenOne",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "TehGoldenOne",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "82f8f3c9cc3978e7b64b586939c2fece098cf04b1be2f04c6343c79b7a7afc8d",
          "withoutMetadata": "a93831f313d34b3372f1547924de7a6a425ca1155709d2a3839bf0655f973181",
          "linkedWithoutMetadata": "a93831f313d34b3372f1547924de7a6a425ca1155709d2a3839bf0655f973181"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "Gold1",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "Gold1",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "Gold1",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "Gold1",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "Gold1",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "Gold1",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "Gold1",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "Gold1",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "Gold1",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "Gold1",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "Gold1",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "Gold1",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "Gold1",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "Gold1",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "Gold1",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "Gold1",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "Gold1",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "Gold1",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "Gold1",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "Gold1",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "Gold1",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "Gold1",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "Gold1",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "Gold1",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "Gold1",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "Gold1",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "Gold1",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "Gold1",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "Gold1",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "Gold1",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "e6bebeabbc9e292c2721df89906addeaf6e8c4becc857c4bca7f3071ad32e4e2",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "98cb3b21b94389b8085aac012cdfb19220447d64e1cfc1a914009e300a337058",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Gold1.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Gold1.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/Gold1.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/Gold1.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "factory()",
          "WETH()",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Gold1.sol:67",
        "version": {
          "withMetadata": "4e8b35e79ff5c595a6a5ec1b696f7f74030fe5938fbae72b98b5ee4eb7c8c30f",
          "withoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2",
          "linkedWithoutMetadata": "9783fbea8c2b03ee54200c75a6166edaf81347d49e0cf80e42b9d5d9ac940fa2"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Gold1.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:68"
            },
            {
              "contract": "Ownable",
              "label": "_previousOwner",
              "type": "t_address",
              "src": "contracts/Gold1.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Gold1.sol:29",
        "version": {
          "withMetadata": "52c608d22d6ce7d2ea58d22b55a3a1b8cc19cd83bfa0d986fdef59f181a6857a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TehGoldenOne": {
        "src": "contracts/Gold1.sol:118",
        "version": {
          "withMetadata": "010f93135dadfd085a0a0fd3efeaf687ff7e63a0b60cdff1de7dfc90c089fb05",
          "withoutMetadata": "a93831f313d34b3372f1547924de7a6a425ca1155709d2a3839bf0655f973181",
          "linkedWithoutMetadata": "a93831f313d34b3372f1547924de7a6a425ca1155709d2a3839bf0655f973181"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "setCooldownEnabled(bool)",
          "setSwapEnabled(bool)",
          "openTrading()",
          "setBots(address[])",
          "setMaxBuyAmount(uint256)",
          "setMaxSellAmount(uint256)",
          "setMaxWalletAmount(uint256)",
          "setSwapTokensAtAmount(uint256)",
          "setFourWallet(address)",
          "setRewardWallet(address)",
          "setLiquidityWallet(address)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "setBuyFee(uint256,uint256,uint256)",
          "setSellFee(uint256,uint256,uint256)",
          "setBlocksToBlacklist(uint256)",
          "delBot(address)",
          "()",
          "manualswap()",
          "manualsend()",
          "withdrawStuckETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TehGoldenOne",
            "src": "contracts/Gold1.sol:179"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyFourFee",
            "src": "contracts/Gold1.sol:127"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyFourFee",
            "src": "contracts/Gold1.sol:128"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyLiquidityFee",
            "src": "contracts/Gold1.sol:129"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyLiquidityFee",
            "src": "contracts/Gold1.sol:130"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_buyRewardFee",
            "src": "contracts/Gold1.sol:131"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousBuyRewardFee",
            "src": "contracts/Gold1.sol:132"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellFourFee",
            "src": "contracts/Gold1.sol:134"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellFourFee",
            "src": "contracts/Gold1.sol:135"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellLiquidityFee",
            "src": "contracts/Gold1.sol:136"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellLiquidityFee",
            "src": "contracts/Gold1.sol:137"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_sellRewardFee",
            "src": "contracts/Gold1.sol:138"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousSellRewardFee",
            "src": "contracts/Gold1.sol:139"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts/Gold1.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts/Gold1.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cooldownEnabled",
            "src": "contracts/Gold1.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActiveBlock",
            "src": "contracts/Gold1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksToBlacklist",
            "src": "contracts/Gold1.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxBuyAmount",
            "src": "contracts/Gold1.sol:162"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxSellAmount",
            "src": "contracts/Gold1.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxWalletAmount",
            "src": "contracts/Gold1.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapTokensAtAmount",
            "src": "contracts/Gold1.sol:165"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TehGoldenOne",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:120"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Gold1.sol:121"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:122"
            },
            {
              "contract": "TehGoldenOne",
              "label": "bots",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:123"
            },
            {
              "contract": "TehGoldenOne",
              "label": "cooldown",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Gold1.sol:124"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_buyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:127"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousBuyFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:128"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:129"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousBuyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:130"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_buyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:131"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousBuyRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:132"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_sellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:134"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousSellFourFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:135"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:136"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousSellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:137"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_sellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:138"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_previousSellRewardFee",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:139"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tokensForReward",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:141"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tokensForFour",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:142"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:143"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_rewardWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:145"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_FourWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:146"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_liquidityWallet",
              "type": "t_address_payable",
              "src": "contracts/Gold1.sol:147"
            },
            {
              "contract": "TehGoldenOne",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)355",
              "src": "contracts/Gold1.sol:153"
            },
            {
              "contract": "TehGoldenOne",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts/Gold1.sol:154"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tradingOpen",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:155"
            },
            {
              "contract": "TehGoldenOne",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:156"
            },
            {
              "contract": "TehGoldenOne",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:157"
            },
            {
              "contract": "TehGoldenOne",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:158"
            },
            {
              "contract": "TehGoldenOne",
              "label": "cooldownEnabled",
              "type": "t_bool",
              "src": "contracts/Gold1.sol:159"
            },
            {
              "contract": "TehGoldenOne",
              "label": "tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:160"
            },
            {
              "contract": "TehGoldenOne",
              "label": "blocksToBlacklist",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:161"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_maxBuyAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:162"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_maxSellAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:163"
            },
            {
              "contract": "TehGoldenOne",
              "label": "_maxWalletAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:164"
            },
            {
              "contract": "TehGoldenOne",
              "label": "swapTokensAtAmount",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:165"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IUniswapV2Router02)355": {
              "label": "contract IUniswapV2Router02"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "fe21fd65d9732cadd31eac1db057020860fc08f7be35903c91ba9178ee995605",
          "withoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f",
          "linkedWithoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6a30ac3a2520ead9ff4638f03319f04a3e0a5480ce080f4fabcc9bc24a5817f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0424fcd99e6356ed7bd04b9436d156544e20204ad060cd1d3b1cb906063c09be",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9d73aaf560c77688129cdb0762d530ffe3569abf280cfef8159bc592a8e1da87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e43247cb84e641cf4a5c5c602fe32968f69f715f4623e1ee3bd3758030581dfb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "758ba38ada3a6bc9ef2bb1e0968ce40d24d438626a8d8416d8578e8fbf9ddf2a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "c6caaa3265bbfe9ae6981aeb8b0172ed20d9a4f799271d9378451286c3c8fe02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4a8f606bc1eee1161605c8bca94486a51c12e450053f4e9aade099470a923e2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "dea8faa0e2580a31eabbabe805c2789f5e239b0592930d6b7e75168adc6572d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "a8c4e6706c1754b99e21311359218afd64254b4bf68bb416578c24d90712c29c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:6",
        "version": {
          "withMetadata": "88d6d3f1173f856024dd2433e54a0ded7a614027126d368c6110ad13bfec2251",
          "withoutMetadata": "ea05df26696fb2155fe02a553ed2d35a78ac5143f9459f13c905f494dd353ba0",
          "linkedWithoutMetadata": "ea05df26696fb2155fe02a553ed2d35a78ac5143f9459f13c905f494dd353ba0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Gold1",
            "src": "contracts/Gold1.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "fe21fd65d9732cadd31eac1db057020860fc08f7be35903c91ba9178ee995605",
          "withoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f",
          "linkedWithoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6a30ac3a2520ead9ff4638f03319f04a3e0a5480ce080f4fabcc9bc24a5817f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0424fcd99e6356ed7bd04b9436d156544e20204ad060cd1d3b1cb906063c09be",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9d73aaf560c77688129cdb0762d530ffe3569abf280cfef8159bc592a8e1da87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e43247cb84e641cf4a5c5c602fe32968f69f715f4623e1ee3bd3758030581dfb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "758ba38ada3a6bc9ef2bb1e0968ce40d24d438626a8d8416d8578e8fbf9ddf2a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "c6caaa3265bbfe9ae6981aeb8b0172ed20d9a4f799271d9378451286c3c8fe02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4a8f606bc1eee1161605c8bca94486a51c12e450053f4e9aade099470a923e2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "dea8faa0e2580a31eabbabe805c2789f5e239b0592930d6b7e75168adc6572d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "a8c4e6706c1754b99e21311359218afd64254b4bf68bb416578c24d90712c29c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyToken": {
        "src": "contracts/Gold1.sol:6",
        "version": {
          "withMetadata": "142e0cb67b1c1f32c0d10b7d52b7aefce499f9b9666cffbdeae58a062047dfb8",
          "withoutMetadata": "224d256fbe34cb99f5f9a996bb55757e71671bbc0c6a94c7baf16f0da8ba3926",
          "linkedWithoutMetadata": "224d256fbe34cb99f5f9a996bb55757e71671bbc0c6a94c7baf16f0da8ba3926"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyToken",
            "src": "contracts/Gold1.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1563_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1563_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1563_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1563_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2976_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2976_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2976_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:204",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "b419ca3a670d63d82b7b44adbe12713d900801daec611c7969bccd444907e452",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5028",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5039",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4936_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5028": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5039": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4936_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)4936_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)4943_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)4943_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)4943_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "6c8ee9744e61c3f0d741ad6a5cdad5be5ab8c3548955d4c0ae09ce47557b2c70",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "88791974f8312a73b254901c52b85a42247bcd04da4e680bb282abbf242554ce",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "c80addb31360db50aeff7baa202beaaaa9334556675623d35466ff1914fe9792",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:16",
        "version": {
          "withMetadata": "b2f60d6f064ba8738f8af75dcef0f3077c6e488f007775df7dec7ce5a5829d53",
          "withoutMetadata": "af7ace0f11cc0689269bb45f30d28d7233c08c8c59a0899151c3d934b9573e1a",
          "linkedWithoutMetadata": "af7ace0f11cc0689269bb45f30d28d7233c08c8c59a0899151c3d934b9573e1a"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:18"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage)",
              "src": "contracts/Maia.sol:25"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/Maia.sol:58"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:60"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:66"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5114_storage)dyn_storage",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5098_storage))",
              "src": "contracts/Maia.sol:71"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:77"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:79"
            }
          ],
          "types": {
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5083_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5083_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5114_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5114_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)4717"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5098_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5098_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5098_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "1965f43af9e002a12d3c41d8f2fcba0c697896b0a8190b54e750ce160ab1073f",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4717",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4717": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:28",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1632_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1632_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1632_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)3045_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)3045_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)3045_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:17",
        "version": {
          "withMetadata": "a9e2b2097ab6dacd8af007b8df3e5931eb9f08bc2bd4b828278ca95b3ba6402b",
          "withoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb",
          "linkedWithoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesCompUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "setTreasuryAddress(address)",
          "setWhitelistAddress(address,bool)",
          "setTax(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/Gold1.sol:19"
            },
            {
              "contract": "Gold1",
              "label": "tax",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:20"
            },
            {
              "contract": "Gold1",
              "label": "whitelistedAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts/Gold1.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:206",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "a9d2d31d3e4929a2aa5774457c4aba3ffa8a885b5227c1bdc966fd0c0eb48579",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5461",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5482",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5369_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5461": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5482": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5369_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)5369_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)5376_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)5376_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)5376_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "52863c5e2874a473906f92b278a863e5596eb53978df9ca0d8f3ab7c01399086",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "32bfb87ffd647ff97330b5a5a0b43b3710dc8a752989f561303c55da5ff587cf",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "6d0defe215d4bd1644f4d1aeb5526d5a840af967148ea571fd31464cfb55ff7c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)",
          "checkHighestStaker(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:14",
        "version": {
          "withMetadata": "daf4d4902e59e80cf7ada4f0c4281aa20e10ce7e2c84859fabbf12fc8f1e9fa3",
          "withoutMetadata": "af5c7c231fbe2ff5dc69a950a717c111d7c8aea4c90899e1940106dd2b3448cd",
          "linkedWithoutMetadata": "af5c7c231fbe2ff5dc69a950a717c111d7c8aea4c90899e1940106dd2b3448cd"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:17"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5529_storage)dyn_storage)",
              "src": "contracts/Maia.sol:24"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:57"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:59"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:65"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5560_storage)dyn_storage",
              "src": "contracts/Maia.sol:68"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5544_storage))",
              "src": "contracts/Maia.sol:70"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:72"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:74"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:76"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:78"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)1540": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5529_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5529_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5529_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5560_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5560_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)1540"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5544_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5544_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5544_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeEnd",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "6db8a5bd5edb3dff50ad911421c281263e7e3ada6df32d1666fb971f6db238bd",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4786",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4786": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/valar/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/valar/ERC20.sol:35",
        "version": {
          "withMetadata": "1b6c782119a960a7c62907b85a19701aed5755ca6d98d8dd002481e9037345a6",
          "withoutMetadata": "90a11b150b85d307d1dc3dc0c5219108eaeff661835f555db2cfa1d022f70054",
          "linkedWithoutMetadata": "90a11b150b85d307d1dc3dc0c5219108eaeff661835f555db2cfa1d022f70054"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/valar/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/valar/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/valar/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/valar/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/valar/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/valar/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/valar/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/valar/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/valar/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/valar/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/valar/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Valar": {
        "src": "contracts/valar/Valar.sol:7",
        "version": {
          "withMetadata": "cb3b9e1a162380ce9519aecf491b7e4388335a66ddf517f27f85ca45e061e940",
          "withoutMetadata": "3e9221b9659eb7c5c3c4c8641864be912a1278cf56c1943ae99f05ba6d5c107e",
          "linkedWithoutMetadata": "3e9221b9659eb7c5c3c4c8641864be912a1278cf56c1943ae99f05ba6d5c107e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "transfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Valar",
            "src": "contracts/valar/Valar.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "fe21fd65d9732cadd31eac1db057020860fc08f7be35903c91ba9178ee995605",
          "withoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f",
          "linkedWithoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:28",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1632_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1632_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1632_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)3045_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)3045_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)3045_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6a30ac3a2520ead9ff4638f03319f04a3e0a5480ce080f4fabcc9bc24a5817f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0424fcd99e6356ed7bd04b9436d156544e20204ad060cd1d3b1cb906063c09be",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9d73aaf560c77688129cdb0762d530ffe3569abf280cfef8159bc592a8e1da87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e43247cb84e641cf4a5c5c602fe32968f69f715f4623e1ee3bd3758030581dfb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "758ba38ada3a6bc9ef2bb1e0968ce40d24d438626a8d8416d8578e8fbf9ddf2a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "c6caaa3265bbfe9ae6981aeb8b0172ed20d9a4f799271d9378451286c3c8fe02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4a8f606bc1eee1161605c8bca94486a51c12e450053f4e9aade099470a923e2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "dea8faa0e2580a31eabbabe805c2789f5e239b0592930d6b7e75168adc6572d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "a8c4e6706c1754b99e21311359218afd64254b4bf68bb416578c24d90712c29c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:28",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1632_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1632_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1632_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)3045_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)3045_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)3045_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:17",
        "version": {
          "withMetadata": "a9e2b2097ab6dacd8af007b8df3e5931eb9f08bc2bd4b828278ca95b3ba6402b",
          "withoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb",
          "linkedWithoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesCompUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "setTreasuryAddress(address)",
          "setWhitelistAddress(address,bool)",
          "setTax(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/Gold1.sol:19"
            },
            {
              "contract": "Gold1",
              "label": "tax",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:20"
            },
            {
              "contract": "Gold1",
              "label": "whitelistedAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts/Gold1.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:206",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "a9d2d31d3e4929a2aa5774457c4aba3ffa8a885b5227c1bdc966fd0c0eb48579",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5461",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5482",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5369_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5461": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5482": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5369_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)5369_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)5376_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)5376_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)5376_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "52863c5e2874a473906f92b278a863e5596eb53978df9ca0d8f3ab7c01399086",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "32bfb87ffd647ff97330b5a5a0b43b3710dc8a752989f561303c55da5ff587cf",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "6d0defe215d4bd1644f4d1aeb5526d5a840af967148ea571fd31464cfb55ff7c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)",
          "checkHighestStaker(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:14",
        "version": {
          "withMetadata": "3cbba7a9847bc6d835983605de765c7d6ec4f9f1eb0efd4d809337370fc945ae",
          "withoutMetadata": "579d426f9a52c6b8413cc7cc4f23235eb41eb804fc723979cc558f37a83d8434",
          "linkedWithoutMetadata": "579d426f9a52c6b8413cc7cc4f23235eb41eb804fc723979cc558f37a83d8434"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:17"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5529_storage)dyn_storage)",
              "src": "contracts/Maia.sol:24"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:56"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:58"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5558_storage)dyn_storage",
              "src": "contracts/Maia.sol:67"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5542_storage))",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:71"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:77"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)1540": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5529_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5529_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5529_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5558_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5558_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)1540"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5542_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5542_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5542_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:11",
        "version": {
          "withMetadata": "6db8a5bd5edb3dff50ad911421c281263e7e3ada6df32d1666fb971f6db238bd",
          "withoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8",
          "linkedWithoutMetadata": "5f1af7c99f7abc87041f285c050e6dcc8356e8d3eaa6e82b049f0238694c83d8"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:13"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:16"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:19"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:22"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "valar",
              "type": "t_contract(IERC20)4786",
              "src": "contracts/governance.sol:57"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)4786": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/valar/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/valar/ERC20.sol:35",
        "version": {
          "withMetadata": "1b6c782119a960a7c62907b85a19701aed5755ca6d98d8dd002481e9037345a6",
          "withoutMetadata": "90a11b150b85d307d1dc3dc0c5219108eaeff661835f555db2cfa1d022f70054",
          "linkedWithoutMetadata": "90a11b150b85d307d1dc3dc0c5219108eaeff661835f555db2cfa1d022f70054"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/valar/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/valar/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/valar/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/valar/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/valar/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/valar/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/valar/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/valar/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/valar/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/valar/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/valar/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MyToken": {
        "src": "contracts/valar/Valar.sol:7",
        "version": {
          "withMetadata": "b26f01f0ce8b1446d282b96ae84a6fb01bebc477d36fcd67f44e558d3206eaf6",
          "withoutMetadata": "3e9221b9659eb7c5c3c4c8641864be912a1278cf56c1943ae99f05ba6d5c107e",
          "linkedWithoutMetadata": "3e9221b9659eb7c5c3c4c8641864be912a1278cf56c1943ae99f05ba6d5c107e"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "transfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyToken",
            "src": "contracts/valar/Valar.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "fe21fd65d9732cadd31eac1db057020860fc08f7be35903c91ba9178ee995605",
          "withoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f",
          "linkedWithoutMetadata": "8f7d5c6a95f326a5a320e3f57911dc36d27a841be748df3f84556ebaa716044f"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:28",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1632_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1632_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1632_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)3045_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)3045_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)3045_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6a30ac3a2520ead9ff4638f03319f04a3e0a5480ce080f4fabcc9bc24a5817f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0424fcd99e6356ed7bd04b9436d156544e20204ad060cd1d3b1cb906063c09be",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9d73aaf560c77688129cdb0762d530ffe3569abf280cfef8159bc592a8e1da87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e43247cb84e641cf4a5c5c602fe32968f69f715f4623e1ee3bd3758030581dfb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "758ba38ada3a6bc9ef2bb1e0968ce40d24d438626a8d8416d8578e8fbf9ddf2a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "c6caaa3265bbfe9ae6981aeb8b0172ed20d9a4f799271d9378451286c3c8fe02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4a8f606bc1eee1161605c8bca94486a51c12e450053f4e9aade099470a923e2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "dea8faa0e2580a31eabbabe805c2789f5e239b0592930d6b7e75168adc6572d1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "a8c4e6706c1754b99e21311359218afd64254b4bf68bb416578c24d90712c29c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2RouterMock": {
        "src": "contracts/treasuryMockExchange.sol:3",
        "version": {
          "withMetadata": "dac49cec551e3bba3d8c082de8245dec77ccf2ccbd94d6bcc304f111336ad515",
          "withoutMetadata": "bafbd8e4406c379ee377d514029cd7b23f218dc9fdb4de70e3825a7e8e64818e",
          "linkedWithoutMetadata": "bafbd8e4406c379ee377d514029cd7b23f218dc9fdb4de70e3825a7e8e64818e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getAmountsOut(uint256,address[])",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2RouterMock",
            "src": "contracts/treasuryMockExchange.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2RouterMock",
              "label": "amount",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/treasuryMockExchange.sol:4"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7d78ee9d3a21120cfe7903e5d121c989fc838c70052e4ab6972d801a54ca8852",
          "withoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3",
          "linkedWithoutMetadata": "8d9120205b5793398619aca58bbe03842de857d4126a35e2fb1f5f5cd86b19f3"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesCompUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:28",
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable"
        ],
        "methods": [
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesCompUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesCompUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:29",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1632_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:263"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1632_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1632_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1632_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)3045_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)3045_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)3045_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "59da949f94e2d55a37a624b2699a2f4d54ccdf4a2e9080131abf9da8f9090c9c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "39ff6b5a3597a5159b6b208174b4694011fd32c76b59876ae4175f6f80cbea19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "9035345d5dbd288f062de9beba959f8fad7639caa35e3a733281246da0f113e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "86372cab1ee27739f0f563d81f6c1653ab2d879f98b1118e19b38b52733f7d0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "7a2bdbbc2ecd7c49378c790abb54ecd8dfbbc1157825c9dccfbbd9795a327615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Gold1": {
        "src": "contracts/Gold1.sol:17",
        "version": {
          "withMetadata": "a9e2b2097ab6dacd8af007b8df3e5931eb9f08bc2bd4b828278ca95b3ba6402b",
          "withoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb",
          "linkedWithoutMetadata": "63adb70bf6be5c7df69625fd0df7c872aba9dbab2d87a2d730a10c6725464ddb"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesCompUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "setTreasuryAddress(address)",
          "setWhitelistAddress(address,bool)",
          "setTax(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Gold1",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/Gold1.sol:19"
            },
            {
              "contract": "Gold1",
              "label": "tax",
              "type": "t_uint256",
              "src": "contracts/Gold1.sol:20"
            },
            {
              "contract": "Gold1",
              "label": "whitelistedAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Gold1.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts/Gold1.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorAlpha": {
        "src": "contracts/GovernorBravoInterfaces.sol:206",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposalCount()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV1": {
        "src": "contracts/GovernorBravoInterfaces.sol:79",
        "version": {
          "withMetadata": "a9d2d31d3e4929a2aa5774457c4aba3ffa8a885b5227c1bdc966fd0c0eb48579",
          "withoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074",
          "linkedWithoutMetadata": "55188b72ba94ba99244bbd8d6ab7b4b557f3a8e7ebbfb9c91313079032e05074"
        },
        "inherit": [
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingDelay",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:82"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "votingPeriod",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:85"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalThreshold",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:88"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "initialProposalId",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:91"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposalCount",
              "type": "t_uint256",
              "src": "contracts/GovernorBravoInterfaces.sol:94"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "timelock",
              "type": "t_contract(TimelockInterface)5383",
              "src": "contracts/GovernorBravoInterfaces.sol:97"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "maia",
              "type": "t_contract(maiaInterface)5404",
              "src": "contracts/GovernorBravoInterfaces.sol:100"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "proposals",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5291_storage)",
              "src": "contracts/GovernorBravoInterfaces.sol:103"
            },
            {
              "contract": "GovernorBravoDelegateStorageV1",
              "label": "latestProposalIds",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:106"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(TimelockInterface)5383": {
              "label": "contract TimelockInterface"
            },
            "t_contract(maiaInterface)5404": {
              "label": "contract maiaInterface"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5291_storage)": {
              "label": "mapping(uint256 => struct GovernorBravoDelegateStorageV1.Proposal)"
            },
            "t_struct(Proposal)5291_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "eta",
                  "type": "t_uint256"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)5298_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(Receipt)5298_storage)": {
              "label": "mapping(address => struct GovernorBravoDelegateStorageV1.Receipt)"
            },
            "t_struct(Receipt)5298_storage": {
              "label": "struct GovernorBravoDelegateStorageV1.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegateStorageV2": {
        "src": "contracts/GovernorBravoInterfaces.sol:181",
        "version": {
          "withMetadata": "52863c5e2874a473906f92b278a863e5596eb53978df9ca0d8f3ab7c01399086",
          "withoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec",
          "linkedWithoutMetadata": "3e8f6fefe7d1d67c8722d7d54ac30086b5853cafd567a5cec99a9c7b498689ec"
        },
        "inherit": [
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistAccountExpirations",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernorBravoInterfaces.sol:183"
            },
            {
              "contract": "GovernorBravoDelegateStorageV2",
              "label": "whitelistGuardian",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:186"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegatorStorage": {
        "src": "contracts/GovernorBravoInterfaces.sol:61",
        "version": {
          "withMetadata": "32bfb87ffd647ff97330b5a5a0b43b3710dc8a752989f561303c55da5ff587cf",
          "withoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd",
          "linkedWithoutMetadata": "0e537ce30309618fcb8aa47891df73faa0099267cf9cf15bfab77f2f51ea2ddd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:63"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:66"
            },
            {
              "contract": "GovernorBravoDelegatorStorage",
              "label": "implementation",
              "type": "t_address",
              "src": "contracts/GovernorBravoInterfaces.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoEvents": {
        "src": "contracts/GovernorBravoInterfaces.sol:6",
        "version": {
          "withMetadata": "6d0defe215d4bd1644f4d1aeb5526d5a840af967148ea571fd31464cfb55ff7c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delay()",
          "GRACE_PERIOD()",
          "acceptAdmin()",
          "queuedTransactions(bytes32)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "maiaInterface": {
        "src": "contracts/GovernorBravoInterfaces.sol:199",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPastVotes(address,uint256)",
          "checkHighestStaker(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Maia": {
        "src": "contracts/Maia.sol:14",
        "version": {
          "withMetadata": "056e70ef666792956e9eb68281056ee76567e2b1a8c333d185e437742ddb568d",
          "withoutMetadata": "fa3eef4afed926a541b8c094dc130829267513e0fa25ce82262cb7db4abc8f1b",
          "linkedWithoutMetadata": "fa3eef4afed926a541b8c094dc130829267513e0fa25ce82262cb7db4abc8f1b"
        },
        "inherit": [
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "getMultiplier(uint256,uint256)",
          "pendingGOLD(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "checkHighestStaker(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimGOLD(uint256)",
          "accessGOLDTokens(uint256,address,uint256)",
          "admin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Maia",
              "label": "gold",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:17"
            },
            {
              "contract": "Maia",
              "label": "highestStakerInPool",
              "type": "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5451_storage)dyn_storage)",
              "src": "contracts/Maia.sol:24"
            },
            {
              "contract": "Maia",
              "label": "GOLD",
              "type": "t_contract(IERC20Upgradeable)1540",
              "src": "contracts/Maia.sol:56"
            },
            {
              "contract": "Maia",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Maia.sol:58"
            },
            {
              "contract": "Maia",
              "label": "topStakerNumber",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:64"
            },
            {
              "contract": "Maia",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)5480_storage)dyn_storage",
              "src": "contracts/Maia.sol:67"
            },
            {
              "contract": "Maia",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5464_storage))",
              "src": "contracts/Maia.sol:69"
            },
            {
              "contract": "Maia",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:71"
            },
            {
              "contract": "Maia",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:73"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDStaked",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:75"
            },
            {
              "contract": "Maia",
              "label": "totalGOLDUsedForPurchase",
              "type": "t_uint256",
              "src": "contracts/Maia.sol:77"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)1540": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_array(t_struct(HighestAstaStaker)5451_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct Maia.HighestAstaStaker[])"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(HighestAstaStaker)5451_storage)dyn_storage": {
              "label": "struct Maia.HighestAstaStaker[]"
            },
            "t_struct(HighestAstaStaker)5451_storage": {
              "label": "struct Maia.HighestAstaStaker",
              "members": [
                {
                  "label": "deposited",
                  "type": "t_uint256"
                },
                {
                  "label": "addr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(PoolInfo)5480_storage)dyn_storage": {
              "label": "struct Maia.PoolInfo[]"
            },
            "t_struct(PoolInfo)5480_storage": {
              "label": "struct Maia.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)1540"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accGOLDPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "lastTotalGOLDReward",
                  "type": "t_uint256"
                },
                {
                  "label": "lastGOLDRewardBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "totalGOLDReward",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5464_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Maia.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)5464_storage)": {
              "label": "mapping(address => struct Maia.UserInfo)"
            },
            "t_struct(UserInfo)5464_storage": {
              "label": "struct Maia.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "rewargoldDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorBravoDelegate": {
        "src": "contracts/governance.sol:9",
        "version": {
          "withMetadata": "a0fbf020b519ab467999900cd7245aebf4c2ce9a49cefdfb30592aad6dafb40d",
          "withoutMetadata": "a2c31af806a7f0177fc17845e8b096f9b9d9cf86e27279b424de2db71352e9fe",
          "linkedWithoutMetadata": "a2c31af806a7f0177fc17845e8b096f9b9d9cf86e27279b424de2db71352e9fe"
        },
        "inherit": [
          "GovernorBravoEvents",
          "GovernorBravoDelegateStorageV2",
          "GovernorBravoDelegateStorageV1",
          "GovernorBravoDelegatorStorage",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "state(uint256)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "isWhitelisted(address)",
          "_setVotingDelay(uint256)",
          "_setInvesteeDetails(address)",
          "_fundInvestee()",
          "_setVotingPeriod(uint256)",
          "_setProposalThreshold(uint256)",
          "_setWhitelistAccountExpiration(address,uint256)",
          "_setWhitelistGuardian(address)",
          "_initiate(address)",
          "_setPendingAdmin(address)",
          "_acceptAdmin()",
          "_AcceptTimelockAdmin()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorBravoDelegate",
              "label": "investeeDetails",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/governance.sol:11"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvestee",
              "type": "t_uint256",
              "src": "contracts/governance.sol:14"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "nextInvesteeFund",
              "type": "t_uint256",
              "src": "contracts/governance.sol:17"
            },
            {
              "contract": "GovernorBravoDelegate",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/governance.sol:20"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Timelock": {
        "src": "contracts/timelock.sol:8",
        "version": {
          "withMetadata": "2aef7d3077865fe07e01126e41114552597b684409d1c264d7b8f2ef61c408c1",
          "withoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611",
          "linkedWithoutMetadata": "cb585e7f82e4e5afcb579499b1f7fb5841929798209390bd6cb7502def2e1611"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,uint256)",
          "()",
          "setDelay(uint256)",
          "acceptAdmin()",
          "setPendingAdmin(address)",
          "queueTransaction(address,uint256,string,bytes,uint256)",
          "cancelTransaction(address,uint256,string,bytes,uint256)",
          "executeTransaction(address,uint256,string,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Timelock",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/timelock.sol:22"
            },
            {
              "contract": "Timelock",
              "label": "pendingAdmin",
              "type": "t_address",
              "src": "contracts/timelock.sol:23"
            },
            {
              "contract": "Timelock",
              "label": "delay",
              "type": "t_uint256",
              "src": "contracts/timelock.sol:24"
            },
            {
              "contract": "Timelock",
              "label": "adminInitialized",
              "type": "t_bool",
              "src": "contracts/timelock.sol:25"
            },
            {
              "contract": "Timelock",
              "label": "queuedTransactions",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/timelock.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernance": {
        "src": "contracts/treasury.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_fundInvestee()",
          "nextInvesteeFund()",
          "nextInvestee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/treasury.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountsOut(uint256,address[])",
          "getPair(address,address)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "WETH()",
          "factory()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Treasury": {
        "src": "contracts/treasury.sol:57",
        "version": {
          "withMetadata": "1bf9a985d4e5be954e441494342ad24e6f156b5907dff7d7476f261b2c0f83a3",
          "withoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57",
          "linkedWithoutMetadata": "302c0f107319069b434e12c554cdb5c6392a69af2d6497dd28afabc01e95ea57"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setDAOAddress(address)",
          "validatePayout()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Treasury",
              "label": "gold",
              "type": "t_address",
              "src": "contracts/treasury.sol:66"
            },
            {
              "contract": "Treasury",
              "label": "dao",
              "type": "t_address",
              "src": "contracts/treasury.sol:67"
            },
            {
              "contract": "Treasury",
              "label": "router",
              "type": "t_address",
              "src": "contracts/treasury.sol:68"
            },
            {
              "contract": "Treasury",
              "label": "totalETH",
              "type": "t_uint256",
              "src": "contracts/treasury.sol:69"
            },
            {
              "contract": "Treasury",
              "label": "path",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/treasury.sol:71"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}